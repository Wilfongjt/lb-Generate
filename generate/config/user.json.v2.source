{
    "source": {
            "kind":"repo-source",
            "umbrella":"01-Generate",
            "branch":"#01.init",
            "repo":"lb-Generate",
            "folders": [{"name":"lb-api/one_db", "type":"db"},
                    {"name":"lb-api/hapi-api","type":"db_api"},
                    {"name":"sql","type":"scripts"}]
    },
    "user": {
        "kind":"api-definition",
        "prefix":"24",
        "name": "user",
        "schema": "api_0_0_1",
        "chelate": {
            "pk": "username",
            "sk": "const#USER",
            "tk": "guid",
            "form": {
                "username": {
                    "name":"username",
                    "type": "email",
                    "operations":"CRuD",
                    "input": "CruD",
                    "output": "R"
                },
                "password": {
                    "name":"password",
                    "type": "password",
                    "operations":"Cu",
                    "input": "Cu",
                    "output": false
                },
                "displayname": {
                    "name":"displayname",
                    "type": "TEXT",
                    "operations":"cru",
                    "input": "cu",
                    "output": "R"
                }
            },
            "active": {
                "default": true
            },
            "created": {
                "default": "NOW()"
            },
            "updated": {
                "default": "NOW()"
            },
            "owner": {
                "default": "current_setting('request.jwt.claim.key')"
            }
        },
        "methods": {
            "POST": {
                "headers": {
                    "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token":{"name":"token","type":"TEXT"},
                    "form":{"name":"testForm","type":"JSON"}
                },
                "passwordHash":true,
                "roles": {
                    "api_admin": {
                        "template":["_chelate := base_0_0_1.chelate('{\"pk\":\"[[data-chelate-pk]]\",\"sk\":\"[[data-chelate-sk]]\",\"tk\":\"*\"}'::JSONB, _form);",
                                    "-- [Stash guid for insert]",
                                    "tmp = set_config('request.jwt.claim.key', replace(_chelate ->> 'tk','guid#',''), true);"]
                    }
                }
            },
            "GET": {
                "headers": {
                   "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token":{"name":"token","type":"TEXT"},
                    "form":{"name":"form","type":"JSON"},
                    "options":{"name":"options","type":"JSON"}
                },
                "roles": {
                    "api_user":{
                        "template":[
                            "    if _form ? 'pk' and _form ? 'sk' then",
                            "        -- [Primary query {pk,sk}]",
                            "        _form = format('{\"pk\":\"%s\", \"sk\":\"%s\"}',_form ->> 'pk',_form ->> 'sk')::JSONB;",
                            "    elsif _form ? 'pk' and not(_form ? 'sk') then",
                            "        -- [Primary query {pk,sk:*}]",
                            "        _form = format('{\"pk\":\"%s\", \"sk\":\"%s\"}',_form ->> 'pk','*')::JSONB;",
                            "     elsif _form ? 'sk' and _form ? 'tk' then",
                            "        -- [Secondary query {sk,tk}]",
                            "        _form = format('{\"sk\":\"%s\", \"tk\":\"%s\"}',_form ->> 'sk',_form ->> 'tk')::JSONB;",
                            "     elsif _form ? 'sk' and not(_form ? 'tk') then",
                            "        -- [Secondary query {sk,tk:*}]",
                            "        _form = format('{\"sk\":\"%s\", \"tk\":\"%s\"}',_form ->> 'sk','*')::JSONB;",
                            "     elsif _form ? 'xk' and _form ? 'yk' then",
                            "        -- [Teriary query {tk,sk} aka {xk, yk}]",
                            "        _form = format('{\"xk\":\"%s\", \"yk\":\"%s\"}',_form ->> 'xk',_form ->> 'yk')::JSONB;",
                            "     elsif _form ? 'xk' and not(_form ? 'yk') then",
                            "        -- [Teriary query {tk} aka {xk}]",
                            "        _form = format('{\"xk\":\"%s\", \"yk\":\"%s\"}',_form ->> 'xk','*')::JSONB;",
                            "     elsif _form ? 'yk' and _form ? 'zk' then",
                            "        -- [Quaternary query {sk,pk} akd {yk,zk}",
                            "        _form = format('{\"yk\":\"%s\", \"zk\":\"%s\"}',_form ->> 'yk',_form ->> 'zk')::JSONB;",
                            "     elsif _form ? 'yk' and not(_form ? 'zk') then",
                            "        -- [Quaternary query {yk}",
                            "        _form = format('{\"yk\":\"%s\", \"zk\":\"%s\"}',_form ->> 'yk','*')::JSONB;",
                            "     end if;"
                        ]
                    },
                    "api_admin":{
                        "template":[
                            "    if _form ? 'pk' and _form ? 'sk' then",
                            "        -- [Primary query {pk,sk}]",
                            "        _form = format('{\"pk\":\"%s\", \"sk\":\"%s\"}',_form ->> 'pk',_form ->> 'sk')::JSONB;",
                            "    elsif _form ? 'pk' and not(_form ? 'sk') then",
                            "        -- [Primary query {pk,sk:*}]",
                            "        _form = format('{\"pk\":\"%s\", \"sk\":\"%s\"}',_form ->> 'pk','*')::JSONB;",
                            "     elsif _form ? 'sk' and _form ? 'tk' then",
                            "        -- [Secondary query {sk,tk}]",
                            "        _form = format('{\"sk\":\"%s\", \"tk\":\"%s\"}',_form ->> 'sk',_form ->> 'tk')::JSONB;",
                            "     elsif _form ? 'sk' and not(_form ? 'tk') then",
                            "        -- [Secondary query {sk,tk:*}]",
                            "        _form = format('{\"sk\":\"%s\", \"tk\":\"%s\"}',_form ->> 'sk','*')::JSONB;",
                            "     elsif _form ? 'xk' and _form ? 'yk' then",
                            "        -- [Teriary query {tk,sk} aka {xk, yk}]",
                            "        _form = format('{\"xk\":\"%s\", \"yk\":\"%s\"}',_form ->> 'xk',_form ->> 'yk')::JSONB;",
                            "     elsif _form ? 'xk' and not(_form ? 'yk') then",
                            "        -- [Teriary query {tk} aka {xk}]",
                            "        _form = format('{\"xk\":\"%s\", \"yk\":\"%s\"}',_form ->> 'xk','*')::JSONB;",
                            "     elsif _form ? 'yk' and _form ? 'zk' then",
                            "        -- [Quaternary query {sk,pk} akd {yk,zk}",
                            "        _form = format('{\"yk\":\"%s\", \"zk\":\"%s\"}',_form ->> 'yk',_form ->> 'zk')::JSONB;",
                            "     elsif _form ? 'yk' and not(_form ? 'zk') then",
                            "        -- [Quaternary query {yk}",
                            "        _form = format('{\"yk\":\"%s\", \"zk\":\"%s\"}',_form ->> 'yk','*')::JSONB;",
                            "     end if;"
                        ]
                    }
                }
            },
            "PUT": {
                "headers": {
                    "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token":{"name":"token","type":"TEXT"},
                    "key": {"name":"pk","type":"TEXT"},
                    "form":{"name":"form","type":"JSON"}
                },
                "passwordHash":true,
                "roles": {
                    "api_user":{
                        "template":[
                            "if strpos(pk,'#') > 0 then",
                            "  -- [Assume <key> is valid when # is found ... at worst, delete will end with a 404]",
                            "  -- [Delete by pk:<key>#<value> and sk:const#USER when undefined prefix]",
                            "  _criteria := format('{\"pk\":\"%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "else",
                            "  -- [Wrap pk as primary key when # is not found in pk]",
                            "  -- [Delete by pk:username#<value> and sk:const#USER when <key># is not present]",
                            "  _criteria := format('{\"pk\":\"[[data-chelate-pk]]#%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "end if;",
                            "-- merget pk and sk",
                            "_chelate := _chelate || _criteria;",
                            "-- add the provided form",
                            "_chelate := _chelate || format('{\"form\": %s}',_form)::JSONB;"
                        ]
                    },
                    "api_admin":{
                        "template":[
                            "if strpos(pk,'#') > 0 then",
                            "  -- [Assume <key> is valid when # is found ... at worst, delete will end with a 404]",
                            "  -- [Delete by pk:<key>#<value> and sk:const#USER when undefined prefix]",
                            "  _criteria := format('{\"pk\":\"%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "else",
                            "  -- [Wrap pk as primary key when # is not found in pk]",
                            "  -- [Delete by pk:username#<value> and sk:const#USER when <key># is not present]",
                            "  _criteria := format('{\"pk\":\"[[data-chelate-pk]]#%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "end if;",
                            "-- merget pk and sk",
                            "_chelate := _chelate || _criteria;",
                            "-- add the provided form",
                            "_chelate := _chelate || format('{\"form\": %s}',_form)::JSONB;"
                        ]
                    }
                }
            },
            "DELETE": {
                "headers": {
                    "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token":{"name":"token","type":"TEXT"},
                    "key": {"name":"pk","type":"TEXT"}
                },
                 "roles": {
                    "api_user":{
                        "template":[
                            "    if strpos(pk,'#') > 0 then",
                            "        -- [Assume <key> is valid when # is found ... at worst, delete will end with a 404]",
                            "        -- [Delete by pk:<key>#<value> and sk:const#USER when undefined prefix]",
                            "        _form := format('{\"pk\":\"%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "    else",
                            "        -- [Wrap pk as primary key when # is not found in pk]",
                            "        -- [Delete by pk:username#<value> and sk:const#USER when <key># is not present]",
                            "        _form := format('{\"pk\":\"[[data-chelate-pk]]#%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "    end if;"
                        ]
                    },
                    "api_admin":{
                        "template":[
                            "    if strpos(pk,'#') > 0 then",
                            "        -- [Assume <key> is valid when # is found ... at worst, delete will end with a 404]",
                            "        -- [Delete by pk:<key>#<value> and sk:const#USER when undefined prefix]",
                            "        _form := format('{\"pk\":\"%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "    else",
                            "        -- [Wrap pk as primary key when # is not found in pk]",
                            "        -- [Delete by pk:username#<value> and sk:const#USER when <key># is not present]",
                            "        _form := format('{\"pk\":\"[[data-chelate-pk]]#%s\", \"sk\":\"[[data-chelate-sk]]\"}',pk)::JSONB;",
                            "    end if;"
                        ]
                    }
                }
            }
        },
        "type": "const#USER",
        "dep-roles": {
            "api_guest": {
                "description":["Guest cannot POST new user",
                               "Guest cannot GET user(s)",
                               "Guest cannot PUT changes into user",
                               "Guest cannot DELETE a user"],
                "privileges": "C",
                "token": "Gk",
                "execute":[]
            },
            "api_user": {
                "description":["User cannot POST another user.",
                               "User can only GET their own user info.",
                               "User can only PUT changes into their own user info",
                               "User can only DELETE their own user info"],
                "privileges": "crud",
                "token": "UK",
                "execute":["GET","PUT","DELETE"]
            },
            "api_admin": {
                "description":["Admin can POST new user",
                               "Admin can GET user(s)",
                               "Admin can DELETE any user",
                               "Admin cannot PUT any changes in a user"],
                "privileges": "r",
                "token": "AK",
                "execute":["POST","GET","DELETE"]
            }
        },
        "runAsRole": "api_guest",
        "tokenRole": "api_user",
        "dep-passwordHashOn": "password"
    },
    "signin": {
        "kind":"api-static",
        "prefix":"24",
        "name": "signin",
        "schema": "api_0_0_1",
        "chelate": {
            "pk": "username",
            "sk": "const#USER",
            "tk": "guid",
            "form": {
                "username": {
                    "name":"username",
                    "type": "email",
                    "operations":"CruD",
                    "input": "CruD",
                    "output": "R"
                },
                "password": {
                    "name":"password",
                    "type": "password",
                    "operations":"Cu",
                    "input": "Cu",
                    "output": false
                }
            },
            "active": {
                "default": true
            },
            "created": {
                "default": "NOW()"
            },
            "updated": {
                "default": "NOW()"
            },
            "owner": {
                "default": "current_setting('request.jwt.claim.key')"
            }
        },
        "methods": {
            "GET": {
                "headers": {
                    "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token": {"name":"token", "type":"TEXT"},
                    "form": {"name":"form", "type":"JSON"}
                },
                "roles": {"api_guest":{"template":"-- no custom code for signin"}}
            }
        },
        "type": "const#USER",
        "dep-roles": {
            "api_guest": {
                "description":["Guest cannot POST new user",
                               "Guest cannot GET user(s)",
                               "Guest cannot PUT changes into user",
                               "Guest cannot DELETE a user"],
                "privileges": "C",
                "token": "Gk",
                "execute":[]
            }
        },
        "runAsRole": "api_guest",
        "tokenRole": "api_user",
        "passwordHashOn": "password"
    },
    "signup": {
        "kind":"api-static",
        "prefix":"24",
        "name": "api-static",
        "schema": "api_0_0_1",
        "chelate": {
            "pk": "username",
            "sk": "const#USER",
            "tk": "guid",
            "form": {
                "username": {
                    "name":"username",
                    "type": "email",
                    "operations":"CR",
                    "input": "C",
                    "output": "R"
                },
                "password": {
                    "name":"password",
                    "type": "password",
                    "operations":"C",
                    "input": "C",
                    "output": false
                },
                "displayname": {
                    "name":"displayname",
                    "type": "TEXT",
                    "operations":"cr",
                    "input": "c",
                    "output": "R"
                }
            },
            "active": {
                "default": true
            },
            "created": {
                "default": "NOW()"
            },
            "updated": {
                "default": "NOW()"
            },
            "owner": {
                "default": "current_setting('request.jwt.claim.key')"
            }
        },
        "methods": {
            "POST": {
                "headers": {
                    "authorization":{"name":"token","type":"TEXT"},
                    "test":{"name":"testForm","type":"TEXT"}
                },
                "parameters": {
                    "token": {"name":"token", "type":"TEXT"},
                    "form": {"name":"form", "type":"JSON"}
                },
                "roles": {"api_guest":{"template":"-- no custom code for signin"}}
            }
        },
        "type": "const#USER",
        "dep-roles": {
            "api_guest": {
                "description":["Guest cannot POST new user",
                               "Guest cannot GET user(s)",
                               "Guest cannot PUT changes into user",
                               "Guest cannot DELETE a user"],
                "privileges": "C",
                "token": "Gk",
                "execute":[]
            }
        },
        "runAsRole": "api_guest",
        "tokenRole": "api_user",
        "passwordHashOn": "password"
    }
}