-- this template is designed to facilitate all the common code accross api DELETE calls
-- pair template up with a custom class to add user specific code ... current-user-code
-- an api definition is also required to provide customization
-- A "[[data-schema]]" is api_0_0_1 {user:schema}
-- B "[[data-name]]" is data-name
-- C "[[data-methods-DELETE-parameters-token-name]]" is data-methods-DELETE-parameters-token-name
-- D "[[data-methods-DELETE-parameters-form-name]]" is form data-methods-DELETE-parameters-form-name
-- E "[[data-methods-DELETE-parameters-form-type]]" is data-methods-DELETE-parameters-form-type
-- F ([[data-DELETE-scope-verification-condition]]) is data-DELETE-scope-verification-condition
-- G ([[data-DELETE-form-required-field-condition]]) is data-DELETE-form-required-field-condition
-- H "[[data-methods-DELETE-grant]]" is data-methods-DELETE-grant
<script "id":"template">
\c [[data-database-name]]
--CREATE SCHEMA if not exists [[data-schema]];
--SET search_path TO [[data-schema]], base_0_0_1, public;

-- Grant Execute
grant EXECUTE on FUNCTION api_0_0_1.time() to api_guest;
/*
CREATE OR REPLACE FUNCTION [[data-schema]].[[data-name]](token TEXT,pk TEXT) RETURNS JSONB AS $$
    Declare result JSONB;
    Declare _form JSONB := '{}'::JSONB;
BEGIN
          -- [Function: [[data-name]] DELETE]
          -- [Description: remove item by primary key ]
          -- [Parameters: token TEXT,pk TEXT]

          set role api_guest;

          -- [A. Validate Token]
          result := base_0_0_1.validate_token(token) ;
          if result is NULL then
            -- [A.1 Fail 403 When token is invalid]
            RESET ROLE;
            return format('{"status":"403","msg":"Forbidden","extra":"Invalid token","user":"%s"}',CURRENT_USER)::JSONB;
          end if;

          -- [B. Validate Parameters]
          -- eg if not(result ->> 'scope' = 'api_admin') and not(result ->> 'scope' = 'api_guest') then
          if [[data-methods-DELETE-scopeVerificationCondition]] then
              -- [B.1 Fail 401 when unexpected token scope is detected]
              RESET ROLE;
              return '{"status":"401","msg":"Unauthorized"}'::JSONB;
          end if;

          if pk is NULL then
              -- [B.2 Fail 400 when pk is NULL]
              RESET ROLE;
              return '{"status":"400","msg":"Bad Request"}'::JSONB;
          end if;

          -- [C. Assemble Chelate Data]

          [[data-methods-DELETE-customRoleCode]]

          -- [D. Delete Chelate]
          result := base_0_0_1.delete(_form, result ->> 'key');
          RESET ROLE;

          -- [Return {status,msg,deletion}]
          return result;
END;
$$ LANGUAGE plpgsql;
*/
-- DELETE
-- e.g., grant EXECUTE on FUNCTION

[[data-methods-DELETE-grant]]
</script>

<script "id":"before-code">
# before DELETE template
def before(data):
    api_kinds ='api-definition api-static'
    api_kinds ='api-definition'
    METHODS = "methods"
    method = 'DELETE'

    api_names = [n for n in data if data[n]['kind'] in api_kinds]

    for function_name in api_names:
        #print('    - C1 ====== funcPattern', function_name)
        ##########
        # inject functionpattern into afpi-methods-DELETE-funcPattern
        # (eg api-methods = {'DELETE': {"funcPattern":'user(TEXT,JSON))'}}
        ##########
        parameters = 'parameters'
        params = ['{}'.format(y[1]['type']) for y in [x for x in data[function_name][METHODS][method][parameters].items()]]
        params = ','.join(params)

        data[function_name][METHODS][method]['funcPattern'] = '{}({})'.format(function_name, params)

        #print('    - C2 ====== Move the Database')
        ##########################
        # inject "database" into api-database
        ##########################
        if 'database' not in data:
            print('ERROR Database key not found.')
            data[function_name]['database'] = {}
            return
        data[function_name]['database'] = data['database']

        #print('    - C3 ====== Grant Execute ')
        ###############################
        # inject "grant" into api-methods-DELETE-grant
        # add grant EXECUTE on FUNCTION <function-name>(<param-type, param-type>...) to <role>
        ###############################
        parameters = 'parameters'
        grant = 'grant'
        roles = 'roles'

        if method in data[function_name][METHODS]:
            # param-type, param-type
            param_types = ['{}'.format(y[1]['type']) for y in
                           [x for x in data[function_name][METHODS][method][parameters].items()]]
            param_types = ','.join(param_types)
            privileges = ['grant EXECUTE on FUNCTION [[data-schema]].{}({}) to {};'.format(function_name, param_types, p) for p in
                          [x for x in data[function_name][METHODS][method][roles]]]
            privileges = '\n'.join(privileges)
            data[function_name][METHODS][method][grant] = '{}'.format(privileges)

        #print('    - C4 ====== Scope')
        ###############################
        # inject "not('api_admin')...or" into scopeVerificationCondition
        # eg not('api_admin')
        ###############################
        roles = 'roles'
        privileges = ['not(result ->> \'scope\' = \'{}\')'.format(p) for p in [x for x in data[function_name][METHODS][method][roles]]]
        privileges = ' and '.join(privileges)

        data[function_name][METHODS][method]['scopeVerificationCondition'] = '{}'.format(privileges)

        #print('    - C5 ====== Required')
        ##############################
        # inject required fields "'not(_form ? \'{}\')...or" into requiredFieldCondition
        # eg requiredFieldCondition': "not(_form ? 'username') or not(_form ? 'password')
        ###############################
        o2m = {'C':"POST","R":"GET","U":"PUT","D":"DELETE"}
        m2o = {"POST":"C","GET":"R","PUT":"U","DELETE":"D"}

        operation =m2o[method]
        required = ['not(_form ? \'{}\')'.format(r) for r in[fld[0] for fld in data[function_name]['chelate']['form'].items() if operation in fld[1]['operations']]]
        required =  ' or '.join(required)

        if len(required) == 0:
            required='1=0'

        data[function_name][METHODS][method]['requiredFieldCondition'] = '{}'.format(required)
        #print('X operation',operation)
        #print('X requiredFieldCondition',data[function_name][METHODS][method]['requiredFieldCondition'])

        #print('    - C6 ====== Hashing')
        ##########
        # Generate Password Hashing code
        # Turn password hashing on when passwordHashCode is <code>
        # passwordHashCode: <code> or False
        # passwordHashCode is False by default
        # chelate operations set to 'C','c','U', or 'u'
        #######
        passwordHashCode=''
        if 'passwordHash' not in data[function_name][METHODS][method]: # set default
            data[function_name][METHODS][method]['passwordHash']=False

        passwordHash=data[function_name][METHODS][method]['passwordHash']
        #print('passwordHash', passwordHash)
        if passwordHash:
            passwordHashField = [h[1]['name'] for h in data[function_name]['chelate']['form'].items()
                                                 if h[1]['type']=='password'
                                                 and ('C' in h[1]['operations'].upper()
                                                      or 'U' in h[1]['operations'].upper())]
            passwordHashField = ''.join(passwordHashField) or False

            if passwordHashField:
                passwordHashCode = '''-- [Password hashing]
                if _form ? '%p' then
                  _form := _form || format('{"%p": "%s"}',crypt(form ->> '%p', gen_salt('bf')) )::JSONB;
                end if;
                '''.replace('%p', passwordHashField)
        data[function_name][METHODS][method]['passwordHashCode']=passwordHashCode or '-- [No Password Hashing]'

        #print('    - C7 ====== Role Specific Code')
        #################
        # inject custom role code as methods-DELETE-customRoleCode
        #################

        roleList = []
        for r in data[function_name]['methods'][method][roles]:
            code = ['            {}'.format(c) for c in data[function_name]['methods'][method][roles][r]['template']]
            code = '\n'.join(code)
            roleList.append('if CURRENT_USER = \'{}\' then /* custom code */\n    {}\n'.format(r,code) )
        roleList = '            els'.join(roleList) + '\n           end if;'
        data[function_name]['methods'][method]['customRoleCode'] = roleList

</script>
<script "id":"after-code">

def after(def_name):
    print('DELETE after code TBD')

</script>